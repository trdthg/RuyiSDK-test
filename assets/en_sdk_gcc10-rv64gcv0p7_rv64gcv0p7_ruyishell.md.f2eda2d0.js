import{_ as e,o as t,c,Q as r}from"./chunks/framework.35bd0d1d.js";const p=JSON.parse('{"title":"使用构建的工具编译测试用例，查看汇编文件中是否使用 V 扩展指令 vsetvli build/bin/riscv64-unknown-linux-gnu-gcc vector.c -S cat vector.s ::: :::","description":"","frontmatter":{},"headers":[],"relativePath":"en/sdk/gcc10-rv64gcv0p7/rv64gcv0p7_ruyishell.md","filePath":"en/sdk/gcc10-rv64gcv0p7/rv64gcv0p7_ruyishell.md","lastUpdated":null}'),s={name:"en/sdk/gcc10-rv64gcv0p7/rv64gcv0p7_ruyishell.md"},i=r('<hr><h2 id="title-使用-ruyishell-下载测试" tabindex="-1">title: 使用 ruyishell 下载测试 <a class="header-anchor" href="#title-使用-ruyishell-下载测试" aria-label="Permalink to &quot;title: 使用 ruyishell 下载测试&quot;">​</a></h2><p>::: tabs 编写测试用例</p><p>::: code-tab c demo</p><p>#include &lt;riscv_vector.h&gt; #include &lt;string.h&gt;</p><p>// reference <a href="https://github.com/riscv/riscv-v-spec/blob/master/example/strcpy.s" target="_blank" rel="noreferrer">https://github.com/riscv/riscv-v-spec/blob/master/example/strcpy.s</a> char <em>strcpy_vec(char</em>dst, const char <em>src) { char</em>save = dst; size_t vlmax = vsetvlmax_e8m8(); long first_set_bit = -1; size_t vl; while (first_set_bit &lt; 0) { src += vl; dst += vl; } return save; } :::</p><p>::: code-tab bash build</p><h1 id="使用构建的工具编译测试用例-查看汇编文件中是否使用-v-扩展指令-vsetvli-build-bin-riscv64-unknown-linux-gnu-gcc-vector-c-s-cat-vector-s" tabindex="-1">使用构建的工具编译测试用例，查看汇编文件中是否使用 V 扩展指令 vsetvli build/bin/riscv64-unknown-linux-gnu-gcc vector.c -S cat vector.s ::: ::: <a class="header-anchor" href="#使用构建的工具编译测试用例-查看汇编文件中是否使用-v-扩展指令-vsetvli-build-bin-riscv64-unknown-linux-gnu-gcc-vector-c-s-cat-vector-s" aria-label="Permalink to &quot;使用构建的工具编译测试用例，查看汇编文件中是否使用 V 扩展指令 vsetvli build/bin/riscv64-unknown-linux-gnu-gcc vector.c -S cat vector.s ::: :::&quot;">​</a></h1>',8),l=[i];function a(n,v,o,u,_,d){return t(),c("div",null,l)}const b=e(s,[["render",a]]);export{p as __pageData,b as default};
